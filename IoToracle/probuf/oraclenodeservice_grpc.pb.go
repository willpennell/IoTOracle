// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: probuf/oraclenodeservice.proto

package probuf

import (

	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OracleNodeServiceClient is the client API for OracleNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleNodeServiceClient interface {
	CheckForRequest(ctx context.Context, in *AckClient, opts ...grpc.CallOption) (*AckServer, error)
	SendRequest(ctx context.Context, in *RequestFromClient, opts ...grpc.CallOption) (*ResponseToClient, error)
	ResponseDelivery(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Receipt, error)
}

type oracleNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleNodeServiceClient(cc grpc.ClientConnInterface) OracleNodeServiceClient {
	return &oracleNodeServiceClient{cc}
}

func (c *oracleNodeServiceClient) CheckForRequest(ctx context.Context, in *AckClient, opts ...grpc.CallOption) (*AckServer, error) {
	out := new(AckServer)
	err := c.cc.Invoke(ctx, "/probuf.OracleNodeService/CheckForRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleNodeServiceClient) SendRequest(ctx context.Context, in *RequestFromClient, opts ...grpc.CallOption) (*ResponseToClient, error) {
	out := new(ResponseToClient)
	err := c.cc.Invoke(ctx, "/probuf.OracleNodeService/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleNodeServiceClient) ResponseDelivery(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/probuf.OracleNodeService/ResponseDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleNodeServiceServer is the server API for OracleNodeService service.
// All implementations must embed UnimplementedOracleNodeServiceServer
// for forward compatibility
type OracleNodeServiceServer interface {
	CheckForRequest(context.Context, *AckClient) (*AckServer, error)
	SendRequest(context.Context, *RequestFromClient) (*ResponseToClient, error)
	ResponseDelivery(context.Context, *Result) (*Receipt, error)
	mustEmbedUnimplementedOracleNodeServiceServer()
}

// UnimplementedOracleNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOracleNodeServiceServer struct {
}

func (UnimplementedOracleNodeServiceServer) CheckForRequest( context.Context, *AckClient) (*AckServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForRequest not implemented")
}
func (UnimplementedOracleNodeServiceServer) SendRequest(context.Context, *RequestFromClient) (*ResponseToClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedOracleNodeServiceServer) ResponseDelivery(context.Context, *Result) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseDelivery not implemented")
}
func (UnimplementedOracleNodeServiceServer) mustEmbedUnimplementedOracleNodeServiceServer() {}

// UnsafeOracleNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleNodeServiceServer will
// result in compilation errors.
type UnsafeOracleNodeServiceServer interface {
	mustEmbedUnimplementedOracleNodeServiceServer()
}

func RegisterOracleNodeServiceServer(s grpc.ServiceRegistrar, srv OracleNodeServiceServer) {
	s.RegisterService(&OracleNodeService_ServiceDesc, srv)
}

func _OracleNodeService_CheckForRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServiceServer).CheckForRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/probuf.OracleNodeService/CheckForRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServiceServer).CheckForRequest(ctx, req.(*AckClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleNodeService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFromClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/probuf.OracleNodeService/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServiceServer).SendRequest(ctx, req.(*RequestFromClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleNodeService_ResponseDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServiceServer).ResponseDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/probuf.OracleNodeService/ResponseDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServiceServer).ResponseDelivery(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// OracleNodeService_ServiceDesc is the grpc.ServiceDesc for OracleNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "probuf.OracleNodeService",
	HandlerType: (*OracleNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckForRequest",
			Handler:    _OracleNodeService_CheckForRequest_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _OracleNodeService_SendRequest_Handler,
		},
		{
			MethodName: "ResponseDelivery",
			Handler:    _OracleNodeService_ResponseDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "probuf/oraclenodeservice.proto",
}
